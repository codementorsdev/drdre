# ===================================================================
# KAFKA CONSUMER CONFIGURATION
# ===================================================================
# Point to the Kafka broker exposed on your host machine
spring.kafka.bootstrap-servers=localhost:29092

# Configure your consumer group ID
spring.kafka.consumer.group-id=my-consumer-group # Choose a relevant group ID

# Optional: Specify key/value deserializers if needed (defaults are often String)
# spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
# spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# If using JsonDeserializer, configure trusted packages
# spring.kafka.consumer.properties.spring.json.trusted.packages=com.yourcompany.yourapp.model

# Optional: Configure auto offset reset policy (earliest/latest)
# spring.kafka.consumer.auto-offset-reset=earliest

# ===================================================================
# DATASOURCE (SQL SERVER) CONFIGURATION
# ===================================================================
# Point to the SQL Server exposed on your host machine
# Make sure 'YourDatabaseName' exists! You might need to create it manually first.
# encrypt=false & trustServerCertificate=true are often needed for local Docker SQL Server without proper SSL setup
spring.datasource.url=jdbc:sqlserver://localhost:1433;databaseName=YourDatabaseName;encrypt=false;trustServerCertificate=true

# Use the username ('sa') and password defined in docker-compose.yml
spring.datasource.username=sa
spring.datasource.password=YourStrong@Password123 # Use the SAME password as in docker-compose.yml

# Optional: Explicitly specify the driver class name (usually auto-detected)
# spring.datasource.driver-class-name=com.microsoft.sqlserver.jdbc.SQLServerDriver

# ===================================================================
# JPA/HIBERNATE CONFIGURATION (If applicable)
# ===================================================================
# Example for SQL Server dialect
spring.jpa.database-platform=org.hibernate.dialect.SQLServerDialect

# Optional: Automatically create/update schema (use 'validate' or 'none' in production/stable testing)
# 'update' is convenient for initial development but use with caution.
spring.jpa.hibernate.ddl-auto=update

spring.jpa.show-sql=true # Log SQL statements (useful for debugging)
